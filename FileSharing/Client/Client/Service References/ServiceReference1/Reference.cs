//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileTransferRequest", Namespace="http://schemas.datacontract.org/2004/07/FileSharing.Server")]
    [System.SerializableAttribute()]
    public partial class FileTransferRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileTransferResponse", Namespace="http://schemas.datacontract.org/2004/07/FileSharing.Server")]
    [System.SerializableAttribute()]
    public partial struct FileTransferResponse : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseStatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateAt {
            get {
                return this.CreateAtField;
            }
            set {
                if ((this.CreateAtField.Equals(value) != true)) {
                    this.CreateAtField = value;
                    this.RaisePropertyChanged("CreateAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseStatus {
            get {
                return this.ResponseStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseStatusField, value) != true)) {
                    this.ResponseStatusField = value;
                    this.RaisePropertyChanged("ResponseStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileDescription", Namespace="http://schemas.datacontract.org/2004/07/FileSharing.Server")]
    [System.SerializableAttribute()]
    public partial struct FileDescription : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SizeBytesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float SizeBytes {
            get {
                return this.SizeBytesField;
            }
            set {
                if ((this.SizeBytesField.Equals(value) != true)) {
                    this.SizeBytesField = value;
                    this.RaisePropertyChanged("SizeBytes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Receive", ReplyAction="http://tempuri.org/IService/ReceiveResponse")]
        Client.ServiceReference1.FileTransferResponse Receive(Client.ServiceReference1.FileTransferRequest request, bool tempFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Receive", ReplyAction="http://tempuri.org/IService/ReceiveResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferResponse> ReceiveAsync(Client.ServiceReference1.FileTransferRequest request, bool tempFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilesInfo", ReplyAction="http://tempuri.org/IService/GetFilesInfoResponse")]
        Client.ServiceReference1.FileDescription[] GetFilesInfo(bool tempFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilesInfo", ReplyAction="http://tempuri.org/IService/GetFilesInfoResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.FileDescription[]> GetFilesInfoAsync(bool tempFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFile", ReplyAction="http://tempuri.org/IService/GetFileResponse")]
        Client.ServiceReference1.FileTransferRequest GetFile(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFile", ReplyAction="http://tempuri.org/IService/GetFileResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferRequest> GetFileAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFile", ReplyAction="http://tempuri.org/IService/DeleteFileResponse")]
        Client.ServiceReference1.FileTransferResponse DeleteFile(string name, bool tempFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFile", ReplyAction="http://tempuri.org/IService/DeleteFileResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferResponse> DeleteFileAsync(string name, bool tempFolder);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference1.IService>, Client.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ServiceReference1.FileTransferResponse Receive(Client.ServiceReference1.FileTransferRequest request, bool tempFolder) {
            return base.Channel.Receive(request, tempFolder);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferResponse> ReceiveAsync(Client.ServiceReference1.FileTransferRequest request, bool tempFolder) {
            return base.Channel.ReceiveAsync(request, tempFolder);
        }
        
        public Client.ServiceReference1.FileDescription[] GetFilesInfo(bool tempFolder) {
            return base.Channel.GetFilesInfo(tempFolder);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.FileDescription[]> GetFilesInfoAsync(bool tempFolder) {
            return base.Channel.GetFilesInfoAsync(tempFolder);
        }
        
        public Client.ServiceReference1.FileTransferRequest GetFile(string name) {
            return base.Channel.GetFile(name);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferRequest> GetFileAsync(string name) {
            return base.Channel.GetFileAsync(name);
        }
        
        public Client.ServiceReference1.FileTransferResponse DeleteFile(string name, bool tempFolder) {
            return base.Channel.DeleteFile(name, tempFolder);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.FileTransferResponse> DeleteFileAsync(string name, bool tempFolder) {
            return base.Channel.DeleteFileAsync(name, tempFolder);
        }
    }
}
